apiVersion: v1
kind: ConfigMap
metadata:
  name: kubia-config # configmap 이름
  namespace: wsscc2021 # configmap 이 속할 namespace
  labels:
    app.kubernetes.io/name: kubia
    # 레이블을 지정합니다.
    # kubernetes 권장 레이블을 참조하면 좋습니다.
    # https://kubernetes.io/ko/docs/concepts/overview/working-with-objects/common-labels/
data:
  myconfig.conf: |
    greet: helloworld
---
apiVersion: v1
kind: Pod
metadata:
  name: kubia-pod # 파드 이름
  namespace: wsscc2021 # 파드가 속할 namespace
  labels:
    app.kubernetes.io/name: kubia
    # 레이블을 지정합니다.
    # kubernetes 권장 레이블을 참조하면 좋습니다.
    # https://kubernetes.io/ko/docs/concepts/overview/working-with-objects/common-labels/
spec:
  volumes:
    - name: config-volume # volume 이름
      configMap:
        name: kubia-config # 가져올 configmap 이름
  containers:
  - image: nginx:alpine
    name: main
    volumeMounts:
    - mountPath: /etc/someconfig.conf #마운트 경로
      name: config-volume # 마운트할 Volume 이름
      subPath: myconfig.conf # Volume의 전체가 아닌, 하위경로를 마운트합니다.
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
      # 어플리케이션이 수신하는 포트
      # 어플리케이션에서 0.0.0.0 으로 노출시켰다면 생략해도 되지만, 
      # 명시적으로 작성하는 것이 좋습니다.
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "100m"
      # requests,limits값을 동일하게 주어 Guaranteed class로 실행하는 것이 좋습니다.
      # Guaranteed class는 pod 축출 시 후순위 파드가 됩니다.
      # QoS에 대한 자세한 내용을 kubernetes 페이지에서 참조하는 것이 좋습니다.
      # https://kubernetes.io/ko/docs/tasks/configure-pod-container/quality-service-pod/