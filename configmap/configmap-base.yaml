apiVersion: v1
kind: ConfigMap
metadata:
  name: fortune-config # configmap 이름
  namespace: wsscc2021 # configmap 이 속할 namespace
  labels:
    app.kubernetes.io/name: fortune
    # 레이블을 지정합니다.
    # kubernetes 권장 레이블을 참조하면 좋습니다.
    # https://kubernetes.io/ko/docs/concepts/overview/working-with-objects/common-labels/
data:
  sleep-interval: "25" # key: value
---
apiVersion: v1
kind: Pod
metadata:
  name: fortune-pod # 파드 이름
  namespace: wsscc2021 # 파드가 속할 namespace
  labels:
    app.kubernetes.io/name: fortune
    # 레이블을 지정합니다.
    # kubernetes 권장 레이블을 참조하면 좋습니다.
    # https://kubernetes.io/ko/docs/concepts/overview/working-with-objects/common-labels/
spec:
  volumes:
  - name: html
    emptyDir: {}
  containers:
  - name: html-generator
    image: luksa/fortune:env
    env:
    - name: INTERVAL
      valueFrom: 
        configMapKeyRef:
          name: fortune-config # configmap 이름
          key: sleep-interval # configmap 내 key 이름
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "100m"
      # requests,limits값을 동일하게 주어 Guaranteed class로 실행하는 것이 좋습니다.
      # Guaranteed class는 pod 축출 시 후순위 파드가 됩니다.
      # QoS에 대한 자세한 내용을 kubernetes 페이지에서 참조하는 것이 좋습니다.
      # https://kubernetes.io/ko/docs/tasks/configure-pod-container/quality-service-pod/
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "100m"
      # requests,limits값을 동일하게 주어 Guaranteed class로 실행하는 것이 좋습니다.
      # Guaranteed class는 pod 축출 시 후순위 파드가 됩니다.
      # QoS에 대한 자세한 내용을 kubernetes 페이지에서 참조하는 것이 좋습니다.
      # https://kubernetes.io/ko/docs/tasks/configure-pod-container/quality-service-pod/