apiVersion: v1
kind: Pod
metadata:
  name: kubia-readiness-pod # 파드 이름
  namespace: wsscc2021 # 파드가 속할 namespace
  labels:
    app.kubernetes.io/name: kubia
    # 레이블을 지정합니다.
    # kubernetes 권장 레이블을 참조하면 좋습니다.
    # https://kubernetes.io/ko/docs/concepts/overview/working-with-objects/common-labels/
spec:
  containers:
  - name: kubia # 컨테이너 이름
    image: piou987/flask-delay-start:v2 # 컨테이너 이미지
    ports:
      - containerPort: 8080 
        protocol: TCP
        # 어플리케이션이 수신하는 포트
        # 어플리케이션에서 0.0.0.0 으로 노출시켰다면 생략해도 되지만, 
        # 명시적으로 작성하는 것이 좋습니다.
    resources:
      requests:
        memory: "128Mi"
        cpu: "500m"
      limits:
        memory: "128Mi"
        cpu: "500m"
      # requests,limits값을 동일하게 주어 Guaranteed class로 실행하는 것이 좋습니다.
      # Guaranteed class는 pod 축출 시 후순위 파드가 됩니다.
      # QoS에 대한 자세한 내용을 kubernetes 페이지에서 참조하는 것이 좋습니다.
      # https://kubernetes.io/ko/docs/tasks/configure-pod-container/quality-service-pod/
    livenessProbe:
      httpGet:
        path: /healthcheck/liveness
        port: 8080
      initialDelaySeconds: 0 # default 0, 어플리케이션이 시작될때까지 기다리는 시간입니다.
      periodSeconds: 5 # default 10, Healthcheck 요청을 보내는 주기(Interval)입니다.
      timeoutSeconds: 3 # default 1, Healthcheck 요청의 타임아웃 값입니다.
      failureThreshold: 3 # default 3, n번 이상 실패하면 파드를 재시작합니다.
      successThreshold: 1 # default 1, n번 이상 성공하면 Running 상태로 넘어갑니다.
      # liveness probe는 어플리케이션이 정상적으로 동작하는 지 확인하고,
      # 동작하지 않는 상태의 컨테이너를 재시작합니다.
      # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    startupProbe:
      httpGet:
        path: /healthcheck/liveness
        port: 8080
      initialDelaySeconds: 0 # default 0, 어플리케이션이 시작될때까지 기다리는 시간입니다.
      periodSeconds: 5 # default 10, Healthcheck 요청을 보내는 주기(Interval)입니다.
      timeoutSeconds: 3 # default 1, Healthcheck 요청의 타임아웃 값입니다.
      failureThreshold: 3 # default 3, n번 이상 실패하면 liveness probe 및 readienss probe를 시작하지 않습니다.
      successThreshold: 1 # default 1, n번 이상 성공하면 liveness probe 및 readienss probe를 시작합니다.
      # startup probe는 어플리케이션 시작되는 도중 liveness probe로 인해 재시작되는 것을 방지하기 위해서 사용됩니다.
      # 이는 initialDelaySeconds 값과 비슷하지만 동적인 시간 대역을 가져갈 수 있습니다.
      # 10 * 6 = 60s(max) periodSeconds * failureThreashold 으로 최대값을 지정할 수 있습니다.
      # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    readinessProbe:
      httpGet:
        path: /healthcheck/readiness
        port: 8080
      initialDelaySeconds: 0 # default 0, 어플리케이션이 시작될때까지 기다리는 시간입니다.
      periodSeconds: 5 # default 10, Healthcheck 요청을 보내는 주기(Interval)입니다.
      timeoutSeconds: 3 # default 1, Healthcheck 요청의 타임아웃 값입니다.
      failureThreshold: 3 # default 3, n번 이상 실패하면 요청을 받지 않습니다.
      successThreshold: 1 # default 1, n번 이상 성공하면 요청을 받습니다.
      # readiness probe는 어플리케이션이 일시적으로 트래픽을 처리할 수 없을 때를 기다리기 위해서 사용됩니다.
      # 예를 들어 트래픽이 너무 몰려 cpu/memory 일정 수준 이상 높아져 500 error가 발생하는 경우가 있습니다.
      # 이런 경우 liveness probe보다 failureThreshold 값을 낮게 주어, liveness probe보다 먼저 동작하도록 설정합니다.
      # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    
    volumeMounts: # 임시 볼륨을 마운트합니다. 이는 data-injection 컨테이너와 공유됩니다.
      - name: shared-data
        mountPath: /prod-data
  
  - name: data-injection # kubia 컨테이너에 /prod-data/greet.txt 파일을 생성하는 작업을 수행하는 컨테이너
    image: alpine:3.13.6
    volumeMounts: # 임시 볼륨을 마운트합니다. 이는 kubia 컨테이너와 공유됩니다.
      - name: shared-data
        mountPath: /prod-data
    command: ["/bin/sh"]
    args: ["-c", "sleep 130; touch /prod-data/greet.txt"]
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "100m"
  
  volumes: # 테스트를 위한 임시 볼륨 생성
  - name: shared-data
    emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: kubia-readiness-clusterip
  namespace: wsscc2021
spec:
  selector:
    app.kubernetes.io/name: kubia
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080